#!/usr/bin/python3
"""yocto_exporter: a Prometheus exporter for YoctoPuce sensor modules."""
#
# Copyright: Alexander Schreiber <als@thangorodrim.ch>
# License: Apache License version 2.o (see file LICENSE for details)
#
# See README for explanations.
#

import argparse
import syslog
import sys
import os
import time

import prometheus_client as p_c

# I need to frobnicate the import path first.
# pylint: disable=C0413
sys.path.append(os.path.join("/opt", "yoctolib_python", "Sources"))
import yocto_api as y_a
# pylint: enable=C0413


# Values below are defaults, overrideable by commandline parameters.
# Our listening port for incoming scrapes.
HTTP_PORT = 8000
# Bind to this IP
BIND_IP='0.0.0.0'

# A whole pile of variables for Prometheus to scrape.

# The declarations below are _variables_, not constants, _and_ they
# follow the style guide.
# pylint: disable=C0103

# request processing time
request_time = p_c.Summary('request_processing_seconds',
                           'Time spent processing request')

# module internal state
usb_current = p_c.Gauge('usb_current', 'module USB current',
                        ['hardware_id', 'unit'])

luminosity = p_c.Gauge('luminosity', 'module beacon luminosity',
                       ['hardware_id', 'unit'])
pressure = p_c.Gauge('pressure', 'air pressure', ['hardware_id', 'unit'])
temperature = p_c.Gauge('temperature', 'air temperature',
                        ['hardware_id', 'unit'])
humidity = p_c.Gauge('humidity', 'air humidity', ['hardware_id', 'unit'])
light = p_c.Gauge('light', 'light', ['hardware_id', 'unit'])
co2 = p_c.Gauge('co2', 'CO2 levels', ['hardware_id', 'unit'])

# exporter state
sensor_read_time = p_c.Gauge('sensor_read_time',
                             'time spend reading sensors/pass', ['unit'])
sensor_read_passes = p_c.Counter('sensor_read_passes',
                                 'number of sensor read passes')
yapi_exceptions = p_c.Counter('yapi_exceptions',
                              'number of exceptions from YAPI')

# pylint: enable=C0103


def find_and_dump_info():
    """Finds modules & sensors and does an info dump."""
    module = y_a.YModule.FirstModule()
    while module:
        print('module : %s is a %s ' % (module.get_serialNumber(),
                                        module.get_productName()))

        module_serial = module.get_serialNumber()
        module_name = module.get_productName()
        function_count = module.functionCount()
        print("module %s:" % module_name)
        print("            beacon_luminosity %s" % module.get_luminosity())
        print("            current %s mA" % module.get_usbCurrent())
        print("            hardware_id %s" % module.get_hardwareId())
        print("            friendly_name %s" % module.get_friendlyName())
        print("%s.%s has %s functions" % (module_serial, module_name,
                                          function_count))
        for function_id in range(0, function_count):
            function_type = module.functionType(function_id)
            function_value = module.functionValue(function_id)
            print("  %s = %s is %s" % (function_id, function_type,
                                       function_value))

        module = module.nextModule()


@request_time.time()
def collect_gauges():
    """Find modules & sensors, update gauges from sensor values."""
    # discover modules
    start_time = time.time()
    module = y_a.YModule.FirstModule()
    while module:
        # discover module info and update gauges
        module_name = module.get_friendlyName()
        print('Querying module: %s' % module_name, flush=True)
        hardware_id = '%s.current' % module_name
        usb_current_value = module.get_usbCurrent()
        usb_current.labels(hardware_id=hardware_id,
                           unit='mA').set(usb_current_value)
        hardware_id = '%s.luminosity' % module_name
        luminosity_value = module.get_luminosity()
        luminosity.labels(hardware_id=hardware_id,
                          unit='%').set(luminosity_value)

        # iterate over functions
        function_count = module.functionCount()
        for function_id in range(1, function_count):  # 0 is datalogger
            # try to sleep 1s after grabbing from each
            function_type = module.functionType(function_id)
            if function_type == 'Temperature':
                hardware_id = '%s.temperature' % module_name
                temperature_value = module.functionValue(function_id)
                temperature.labels(hardware_id=hardware_id,
                                   unit='Celsius').set(temperature_value)
            if function_type == 'Pressure':
                hardware_id = '%s.pressure' % module_name
                pressure_value = module.functionValue(function_id)
                pressure.labels(hardware_id=hardware_id,
                                unit='mbar').set(pressure_value)
            if function_type == 'Humidity':
                hardware_id = '%s.humidity' % module_name
                humidity_value = module.functionValue(function_id)
                humidity.labels(hardware_id=hardware_id,
                                unit='% RH').set(humidity_value)
            if function_type == 'LightSensor':
                hardware_id = '%s.light' % module_name
                light_value = module.functionValue(function_id)
                light.labels(hardware_id=hardware_id,
                             unit='lux').set(light_value)
            if function_type == 'CarbonDioxide':
                hardware_id = '%s.co2' % module_name
                co2_value = module.functionValue(function_id)
                co2.labels(hardware_id=hardware_id,
                           unit='ppm').set(co2_value)
            time.sleep(1)

        module = module.nextModule()

    end_time = time.time()
    sensor_read_time_value = end_time - start_time
    sensor_read_time.labels(unit='s').set(sensor_read_time_value)
    sensor_read_passes.inc()


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', default=HTTP_PORT, type=int,
                        help='port to bind to (default %s)' % HTTP_PORT)
    parser.add_argument('--bind_ip', default=BIND_IP,
                        help='IP to bind to (default %s)' % BIND_IP)
    parser.add_argument('--dump_sensors', action='store_true', default=False,
                        help='dump sensor info and exit')
    parser.add_argument('--debug', action='store_true', default=False,
                        help='dump sensor info and continue')
    args = parser.parse_args()

    if not args.dump_sensors:
      print('yocto_exporter starting up ...')
      syslog.syslog('yocto_exporter starting up ...')

    # Setup the API to use local USB devices
    errmsg = y_a.YRefParam()
    if y_a.YAPI.RegisterHub("usb", errmsg) != y_a.YAPI.SUCCESS:
        syslog.syslog('RegisterHub error: ' + str(errmsg))
        sys.exit(1)

    time.sleep(2)

    if args.debug:
        find_and_dump_info()
    if args.dump_sensors:
        find_and_dump_info()
        sys.exit(0)

    # pre-load exported variables so we have something to show
    collect_gauges()
    p_c.start_http_server(args.port, addr=args.bind_ip)
    print('HTTP server started on %s:%s, collection loop running.'
          % (args.bind_ip, args.port))
    syslog.syslog('HTTP server started on %s:%s, collection loop running.'
                  % (args.bind_ip, args.port))
    while True:
        time.sleep(5)
        try:
            collect_gauges()
        except y_a.YAPI_Exception:
            # Catch and restart the hub session. Catch & ignore meant that
            # the afflicted module (always the light sensor) is stuck at the
            # last value. Restarting the exporter always fixed it, so
            # doing the unregister/register should do the same.
            syslog.syslog('Caught YAPI exception, trying to restart')
            yapi_exceptions.inc()
            # try to re-register
            time.sleep(5)
            syslog.syslog('unregistering hub')
            if y_a.YAPI.UnregisterHub("usb", errmsg) != y_a.YAPI.SUCCESS:
                syslog.syslog('UnregisterHub error: ' + str(errmsg))
                sys.exit(1)
            # allow things to settle
            time.sleep(5)
            syslog.syslog('registering hub')
            errmsg = y_a.YRefParam()
            if y_a.YAPI.RegisterHub("usb", errmsg) != y_a.YAPI.SUCCESS:
                syslog.syslog('RegisterHub error: ' + str(errmsg))
                sys.exit(1)
            time.sleep(5)
            syslog.syslog('back to regular operations')



if __name__ == '__main__':
    main()
